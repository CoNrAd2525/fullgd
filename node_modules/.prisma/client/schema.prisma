// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String
  name           String?
  role           String    @default("user") // user, admin
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastLoginAt    DateTime?
  profilePicture String?
  settings       Json?     @default("{}") // User preferences

  // Relations
  agents         Agent[]         @relation("UserAgents")
  workflows      Workflow[]      @relation("UserWorkflows")
  knowledgeBases KnowledgeBase[] @relation("UserKnowledgeBases")
  tools          Tool[]          @relation("UserTools")
  apiKeys        ApiKey[]        @relation("UserApiKeys")
  activities     Activity[]      @relation("UserActivities")

  @@map("users")
}

// API Key model
model ApiKey {
  id        String    @id @default(uuid())
  name      String
  key       String    @unique
  isActive  Boolean   @default(true)
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastUsed  DateTime?

  // Relations
  userId String
  user   User   @relation("UserApiKeys", fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// Agent model
model Agent {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        String // llm, function, human, etc.
  config      Json // Agent configuration
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId         String
  user           User                 @relation("UserAgents", fields: [userId], references: [id], onDelete: Cascade)
  workflows      WorkflowAgent[]      @relation("WorkflowAgents")
  executions     AgentExecution[]     @relation("AgentExecutions")
  memories       Memory[]             @relation("AgentMemories")
  knowledgeBases AgentKnowledgeBase[] @relation("AgentKnowledgeBases")
  tools          AgentTool[]          @relation("AgentTools")

  @@map("agents")
}

// Workflow model
model Workflow {
  id          String   @id @default(uuid())
  name        String
  description String?
  config      Json // Workflow configuration
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId     String
  user       User                @relation("UserWorkflows", fields: [userId], references: [id], onDelete: Cascade)
  agents     WorkflowAgent[]     @relation("WorkflowAgents")
  executions WorkflowExecution[] @relation("WorkflowExecutions")

  @@map("workflows")
}

// WorkflowAgent model (join table)
model WorkflowAgent {
  id        String   @id @default(uuid())
  position  Int // Position in the workflow
  config    Json? // Agent-specific configuration in this workflow
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  workflowId String
  workflow   Workflow @relation("WorkflowAgents", fields: [workflowId], references: [id], onDelete: Cascade)
  agentId    String
  agent      Agent    @relation("WorkflowAgents", fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([workflowId, agentId])
  @@map("workflow_agents")
}

// Agent Execution model
model AgentExecution {
  id          String    @id @default(uuid())
  status      String // pending, running, completed, failed
  input       Json?
  output      Json?
  error       String?
  startedAt   DateTime?
  completedAt DateTime?
  duration    Int? // Duration in milliseconds
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  agentId             String
  agent               Agent              @relation("AgentExecutions", fields: [agentId], references: [id], onDelete: Cascade)
  workflowExecutionId String?
  workflowExecution   WorkflowExecution? @relation("WorkflowAgentExecutions", fields: [workflowExecutionId], references: [id])

  @@map("agent_executions")
}

// Workflow Execution model
model WorkflowExecution {
  id          String    @id @default(uuid())
  status      String // pending, running, completed, failed
  input       Json?
  output      Json?
  error       String?
  progress    Float?    @default(0) // Progress percentage
  startedAt   DateTime?
  completedAt DateTime?
  duration    Int? // Duration in milliseconds
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  workflowId      String
  workflow        Workflow         @relation("WorkflowExecutions", fields: [workflowId], references: [id], onDelete: Cascade)
  agentExecutions AgentExecution[] @relation("WorkflowAgentExecutions")

  @@map("workflow_executions")
}

// Memory model
model Memory {
  id        String   @id @default(uuid())
  content   String   @db.Text
  metadata  Json? // Additional metadata
  embedding Float[] // Vector embedding
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  agentId String
  agent   Agent  @relation("AgentMemories", fields: [agentId], references: [id], onDelete: Cascade)

  @@map("memories")
}

// Knowledge Base model
model KnowledgeBase {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        String // vector, graph, etc.
  config      Json? // Knowledge base configuration
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId    String
  user      User                 @relation("UserKnowledgeBases", fields: [userId], references: [id], onDelete: Cascade)
  documents Document[]           @relation("KnowledgeBaseDocuments")
  agents    AgentKnowledgeBase[] @relation("AgentKnowledgeBases")

  @@map("knowledge_bases")
}

// Document model
model Document {
  id        String   @id @default(uuid())
  name      String
  content   String   @db.Text
  mimeType  String
  metadata  Json?
  embedding Float[] // Vector embedding
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  knowledgeBaseId String
  knowledgeBase   KnowledgeBase @relation("KnowledgeBaseDocuments", fields: [knowledgeBaseId], references: [id], onDelete: Cascade)

  @@map("documents")
}

// AgentKnowledgeBase model (join table)
model AgentKnowledgeBase {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Relations
  agentId         String
  agent           Agent         @relation("AgentKnowledgeBases", fields: [agentId], references: [id], onDelete: Cascade)
  knowledgeBaseId String
  knowledgeBase   KnowledgeBase @relation("AgentKnowledgeBases", fields: [knowledgeBaseId], references: [id], onDelete: Cascade)

  @@unique([agentId, knowledgeBaseId])
  @@map("agent_knowledge_bases")
}

// Tool model
model Tool {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        String // api, function, etc.
  config      Json // Tool configuration
  schema      Json? // Tool schema
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User        @relation("UserTools", fields: [userId], references: [id], onDelete: Cascade)
  agents AgentTool[] @relation("AgentTools")

  @@map("tools")
}

// AgentTool model (join table)
model AgentTool {
  id        String   @id @default(uuid())
  config    Json? // Tool-specific configuration for this agent
  createdAt DateTime @default(now())

  // Relations
  agentId String
  agent   Agent  @relation("AgentTools", fields: [agentId], references: [id], onDelete: Cascade)
  toolId  String
  tool    Tool   @relation("AgentTools", fields: [toolId], references: [id], onDelete: Cascade)

  @@unique([agentId, toolId])
  @@map("agent_tools")
}

// Activity model
model Activity {
  id        String   @id @default(uuid())
  type      String // login, agent_creation, workflow_execution, etc.
  details   Json?
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation("UserActivities", fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}
